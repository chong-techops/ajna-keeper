---
# ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{NETWORK_NAME}}-graph-node-config
data:
  ipfs: "http://{{NETWORK_NAME}}-ipfs:5001"
  postgres_host: "{{NETWORK_NAME}}-postgres"
  postgres_port: "5432"
  postgres_user: "graph-node"
  postgres_db: "graph-node"
  graphql_port: "8000"
  admin_port: "8020"
  index_port: "8030"
  metrics_port: "8040"
---
# External Secrets
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{NETWORK_NAME}}-graph-node-secrets
spec:
  refreshInterval: "5m"
  secretStoreRef:
    name: {{CLUSTER_NAME}}
    kind: ClusterSecretStore
  target:
    name: {{NETWORK_NAME}}-graph-node-secrets
    creationPolicy: Owner
  data:
    - secretKey: postgres_password
      remoteRef:
        key: /eks/{{CLUSTER_NAME}}/ajna-subgraph/{{NETWORK_NAME}}/postgres-password
    - secretKey: eth_network
      remoteRef:
        key: /eks/{{CLUSTER_NAME}}/ajna-subgraph/{{NETWORK_NAME}}/eth-network
---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{NETWORK_NAME}}-postgres
spec:
  serviceName: {{NETWORK_NAME}}-postgres
  replicas: 1
  selector:
    matchLabels:
      app: {{NETWORK_NAME}}-postgres
  template:
    metadata:
      labels:
        app: {{NETWORK_NAME}}-postgres
    spec:
      containers:
      - name: postgres
        image: postgres:14
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: {{NETWORK_NAME}}-graph-node-config
              key: postgres_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{NETWORK_NAME}}-graph-node-secrets
              key: postgres_password
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: {{NETWORK_NAME}}-graph-node-config
              key: postgres_db
        - name: POSTGRES_INITDB_ARGS
          value: "-E UTF8 --locale=C"
        - name: PGDATA
          value: /var/lib/postgresql/data
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: {{NETWORK_NAME}}-postgres
spec:
  selector:
    app: {{NETWORK_NAME}}-postgres
  ports:
  - port: 5432
    targetPort: 5432
---
# IPFS Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{NETWORK_NAME}}-ipfs
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{NETWORK_NAME}}-ipfs
  template:
    metadata:
      labels:
        app: {{NETWORK_NAME}}-ipfs
    spec:
      containers:
      - name: ipfs
        image: ipfs/kubo:latest
        ports:
        - containerPort: 5001
          name: api
        volumeMounts:
        - name: ipfs-data
          mountPath: /data/ipfs
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: ipfs-data
        persistentVolumeClaim:
          claimName: {{NETWORK_NAME}}-ipfs-data
---
# IPFS PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{NETWORK_NAME}}-ipfs-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
# IPFS Service
apiVersion: v1
kind: Service
metadata:
  name: {{NETWORK_NAME}}-ipfs
spec:
  selector:
    app: {{NETWORK_NAME}}-ipfs
  ports:
  - port: 5001
    targetPort: 5001
    name: api
---
# Graph Node Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{NETWORK_NAME}}-graph-node
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{NETWORK_NAME}}-graph-node
  template:
    metadata:
      labels:
        app: {{NETWORK_NAME}}-graph-node
    spec:
      containers:
      - name: graph-node
        image: graphprotocol/graph-node
        ports:
        - containerPort: 8000
          name: graphql-http
        - containerPort: 8001
          name: graphql-ws
        - containerPort: 8020
          name: json-rpc
        - containerPort: 8030
          name: indexer
        - containerPort: 8040
          name: metrics
        env:
        - name: ethereum
          valueFrom:
            secretKeyRef:
              name: {{NETWORK_NAME}}-graph-node-secrets
              key: eth_network
        - name: ipfs
          valueFrom:
            configMapKeyRef:
              name: {{NETWORK_NAME}}-graph-node-config
              key: ipfs
        - name: postgres_host
          valueFrom:
            configMapKeyRef:
              name: {{NETWORK_NAME}}-graph-node-config
              key: postgres_host
        - name: postgres_port
          valueFrom:
            configMapKeyRef:
              name: {{NETWORK_NAME}}-graph-node-config
              key: postgres_port
        - name: postgres_user
          valueFrom:
            configMapKeyRef:
              name: {{NETWORK_NAME}}-graph-node-config
              key: postgres_user
        - name: postgres_pass
          valueFrom:
            secretKeyRef:
              name: {{NETWORK_NAME}}-graph-node-secrets
              key: postgres_password
        - name: postgres_db
          valueFrom:
            configMapKeyRef:
              name: {{NETWORK_NAME}}-graph-node-config
              key: postgres_db
        - name: GRAPH_LOG
          value: info
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
---
# Graph Node Service
apiVersion: v1
kind: Service
metadata:
  name: {{NETWORK_NAME}}-graph-node
spec:
  selector:
    app: {{NETWORK_NAME}}-graph-node
  ports:
  - port: 8000
    name: graphql-http
    targetPort: 8000
  - port: 8001
    name: graphql-ws
    targetPort: 8001
  - port: 8020
    name: json-rpc
    targetPort: 8020
  - port: 8030
    name: indexer
    targetPort: 8030
  - port: 8040
    name: metrics
    targetPort: 8040
  type: ClusterIP
